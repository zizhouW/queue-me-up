{"version":3,"sources":["redux/enhancers/monitorReducer.js","redux/middleware/logger.js","redux/types/baseTypes.js","redux/types/Queue.js","redux/reducers/QueueReducers.js","redux/reducers/index.js","util/firebase.js","pages/create-queue/CreateQueue.js","pages/home/Home.js","redux/actions/Queue.js","pages/queue/Queue.js","App.js","serviceWorker.js","index.js","redux/configureStore.js"],"names":["monitorReducerEnhancer","createStore","reducer","initialState","enhancer","state","action","number","start","performance","now","newState","end","diff","Math","round","console","log","logger","store","next","group","type","info","result","getState","groupEnd","BASE_TYPES","QUEUE_DATA_LOADING","QUEUE_DATA_SUCCESS","QUEUE_DATA_ERROR","JOIN_QUEUE_LOADING","JOIN_QUEUE_SUCCESS","JOIN_QUEUE_ERROR","LEAVE_QUEUE_LOADING","LEAVE_QUEUE_SUCCESS","LEAVE_QUEUE_ERROR","getQueueState","queueData","isQueueDataLoading","queueDataError","joinQueueState","joinQueueResponse","isJoinQueueLoading","joinQueueError","leaveQueueState","leaveQueueResponse","isLeaveQueueLoading","leaveQueueError","rootReducer","combineReducers","getQueueReducer","types","payload","joinQueueReducer","leaveQueueReducer","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","CreateQueue","props","queueName","startTime","Date","maxTimespan","actionUserNumber","error","handleCreateQueue","bind","handleQueueNameChange","handleStartTimeChange","handleMaxTimespanChange","handleActionUserNumberChange","this","setState","firestore","collection","add","name","users","then","res","doc","id","onSnapshot","exists","history","push","event","target","value","startDateTime","className","FormControl","InputLabel","htmlFor","Input","onChange","utils","DateFnsUtils","DateTimePicker","label","disablePast","format","TextField","InputLabelProps","shrink","margin","Button","variant","color","onClick","Component","withRouter","Home","handleRedirectCreateQueue","getQueueDataLoading","joinQueueLoading","joinQueueSuccess","leaveQueueLoading","getQueueData","queueId","dispatch","isLoading","queueIndex","Object","assign","data","seconds","map","userName","order","joinQueue","update","FieldValue","arrayUnion","response","currentUser","leaveQueue","arrayRemove","message","Queue","handleJoinQueue","handleLeaveQueue","handleUsernameChange","onLeaveQueue","onJoinQueue","e","timeNow","usersInAction","usersInQueue","length","concat","splice","subTitle","mainContent","toString","user","key","disabled","defaultProps","connect","ownProps","match","params","App","path","Boolean","window","location","hostname","preloadedState","middlewares","loggerMiddleware","thunkMiddleware","enhancers","applyMiddleware","monitorReducersEnhancer","composedEnhancers","compose","configureStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.89069736.chunk.js","sourcesContent":["const round = number => Math.round(number * 100) / 100;\r\n\r\nconst monitorReducerEnhancer = createStore => (\r\n  reducer,\r\n  initialState,\r\n  enhancer\r\n) => {\r\n  const monitoredReducer = (state, action) => {\r\n    const start = performance.now();\r\n    const newState = reducer(state, action);\r\n    const end = performance.now();\r\n    const diff = round(end - start);\r\n\r\n    console.log('reducer process time:', diff);\r\n\r\n    return newState;\r\n  };\r\n\r\n  return createStore(monitoredReducer, initialState, enhancer);\r\n};\r\n\r\nexport default monitorReducerEnhancer;\r\n","const logger = store => next => action => {\r\n  console.group(action.type);\r\n  console.info('dispatching', action);\r\n  let result = next(action);\r\n  console.log('next state', store.getState());\r\n  console.groupEnd();\r\n  return result;\r\n}\r\n\r\nexport default logger;\r\n","export const BASE_TYPES = {\r\n  LOADING: 'LOADING',\r\n  SUCCESS: 'SUCCESS',\r\n  ERROR: 'ERROR',\r\n};\r\n","import { BASE_TYPES } from './baseTypes';\r\n\r\nexport const QUEUE_DATA_LOADING = `QUEUE_DATA_${BASE_TYPES.LOADING}`;\r\nexport const QUEUE_DATA_SUCCESS = `QUEUE_DATA_${BASE_TYPES.SUCCESS}`;\r\nexport const QUEUE_DATA_ERROR = `QUEUE_DATA_${BASE_TYPES.ERROR}`;\r\n\r\nexport const JOIN_QUEUE_LOADING = `JOIN_QUEUE_${BASE_TYPES.LOADING}`;\r\nexport const JOIN_QUEUE_SUCCESS = `JOIN_QUEUE_${BASE_TYPES.SUCCESS}`;\r\nexport const JOIN_QUEUE_ERROR = `JOIN_QUEUE_${BASE_TYPES.ERROR}`;\r\n\r\nexport const LEAVE_QUEUE_LOADING = `LEAVE_QUEUE_${BASE_TYPES.LOADING}`;\r\nexport const LEAVE_QUEUE_SUCCESS = `LEAVE_QUEUE_${BASE_TYPES.SUCCESS}`;\r\nexport const LEAVE_QUEUE_ERROR = `LEAVE_QUEUE_${BASE_TYPES.ERROR}`;\r\n","import * as types from '../types/Queue';\r\n\r\nconst getQueueState = {\r\n  queueData: {},\r\n  isQueueDataLoading: false,\r\n  queueDataError: null,\r\n}\r\n\r\nconst joinQueueState = {\r\n  joinQueueResponse: {},\r\n  isJoinQueueLoading: false,\r\n  joinQueueError: null,\r\n};\r\n\r\nconst leaveQueueState = {\r\n  leaveQueueResponse: {},\r\n  isLeaveQueueLoading: false,\r\n  leaveQueueError: null,\r\n};\r\n\r\nexport const getQueueReducer = (state = getQueueState, action) => {\r\n  switch(action.type) {\r\n    case types.QUEUE_DATA_LOADING:\r\n      return { ...state, isQueueDataLoading: action.payload, queueDataError: null };\r\n    case types.QUEUE_DATA_SUCCESS:\r\n      return { ...state, isQueueDataLoading: false, queueData: action.payload };\r\n    case types.QUEUE_DATA_ERROR:\r\n      return { ...state, isQueueDataLoading: false, queueDataError: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport const joinQueueReducer = (state = joinQueueState, action) => {\r\n  switch(action.type) {\r\n    case types.JOIN_QUEUE_LOADING:\r\n      return { ...state, isJoinQueueLoading: action.payload, joinQueueError: null };\r\n    case types.JOIN_QUEUE_SUCCESS:\r\n      return { ...state, isJoinQueueLoading: false, joinQueueResponse: action.payload };\r\n    case types.JOIN_QUEUE_ERROR:\r\n      return { ...state, isJoinQueueLoading: false, joinQueueError: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n\r\nexport const leaveQueueReducer = (state = leaveQueueState, action) => {\r\n  switch(action.type) {\r\n    case types.LEAVE_QUEUE_LOADING:\r\n      return { ...state, isLeaveQueueLoading: action.payload, leaveQueueError: null };\r\n    case types.LEAVE_QUEUE_SUCCESS:\r\n      return { ...state, isLeaveQueueLoading: false, leaveQueueResponse: action.payload };\r\n    case types.LEAVE_QUEUE_ERROR:\r\n      return { ...state, isLeaveQueueLoading: false, leaveQueueError: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport { getQueueReducer, joinQueueReducer, leaveQueueReducer } from './QueueReducers';\r\n// import recommendationsReducer from '../features/recommendations/reducers';\r\n\r\nconst rootReducer = combineReducers({\r\n  getQueueReducer,\r\n  joinQueueReducer,\r\n  leaveQueueReducer,\r\n});\r\n\r\nexport default rootReducer;\r\n","import firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\n\r\nvar firebaseConfig = {\r\n\tapiKey: \"AIzaSyCeFjz8D74S_eUe6g6DFCEB9MFOB73MJWg\",\r\n\tauthDomain: \"queue-me-up.firebaseapp.com\",\r\n\tdatabaseURL: \"https://queue-me-up.firebaseio.com\",\r\n\tprojectId: \"queue-me-up\",\r\n\tstorageBucket: \"queue-me-up.appspot.com\",\r\n\tmessagingSenderId: \"59079782968\",\r\n\tappId: \"1:59079782968:web:71f8308203e4045d5e6ccd\",\r\n\tmeasurementId: \"G-ZTY8H01CCW\"\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;\r\n","import React, { Component } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { FormControl, InputLabel, Input, Button, TextField } from '@material-ui/core';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport { DateTimePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\r\nimport firebase from '../../util/firebase';\r\nimport './CreateQueue.scss';\r\n\r\nclass CreateQueue extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      queueName: '',\r\n      startTime: new Date(),\r\n      maxTimespan: 5,\r\n      actionUserNumber: 1,\r\n      error: '',\r\n    };\r\n    this.handleCreateQueue = this.handleCreateQueue.bind(this);\r\n    this.handleQueueNameChange = this.handleQueueNameChange.bind(this);\r\n    this.handleStartTimeChange = this.handleStartTimeChange.bind(this);\r\n    this.handleMaxTimespanChange = this.handleMaxTimespanChange.bind(this);\r\n    this.handleActionUserNumberChange = this.handleActionUserNumberChange.bind(this);\r\n  }\r\n\r\n  handleCreateQueue() {\r\n    const { queueName, startTime, maxTimespan, actionUserNumber, error} = this.state;\r\n    if (startTime <= new Date()) {\r\n      this.setState({\r\n        error: 'Start time can not be in the past',\r\n      });\r\n      return;\r\n    } else {\r\n      this.setState({\r\n        error: null,\r\n      });\r\n    }\r\n\r\n    if (!error) {\r\n      // TODO: option to replace n people after each queue action\r\n      firebase.firestore().collection('queues').add({\r\n        name: queueName,\r\n        users: [],\r\n        startTime,\r\n        maxTimespan,\r\n        actionUserNumber,\r\n      }).then((res) => {\r\n        firebase.firestore().collection('queues').doc(res.id).onSnapshot((doc) => {\r\n          if (doc.exists) {\r\n            this.props.history.push(`/queue/${doc.id}`);\r\n          }\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  handleQueueNameChange(event) {\r\n    if (event && event.target) {\r\n      this.setState({\r\n        queueName: event.target.value,\r\n      });\r\n    }\r\n  }\r\n\r\n  handleStartTimeChange(startDateTime) {\r\n    this.setState({\r\n      error: '',\r\n      startTime: startDateTime,\r\n    });\r\n  }\r\n\r\n  handleMaxTimespanChange(event) {\r\n    if (event && event.target) {\r\n      this.setState({\r\n        maxTimespan: event.target.value,\r\n      });\r\n    }\r\n  }\r\n\r\n  handleActionUserNumberChange(event) {\r\n    if (event && event.target) {\r\n      this.setState({\r\n        actionUserNumber: event.target.value,\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"create-queue-container\">\r\n        <h1>Create Queue</h1>\r\n        {this.state.error && <div className=\"form-error\">{this.state.error}</div>}\r\n        <FormControl>\r\n          <InputLabel htmlFor=\"input-name\">Queue Name</InputLabel>\r\n          <Input id=\"input-name\" value={this.state.queueName} onChange={this.handleQueueNameChange} />\r\n          <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n            <DateTimePicker\r\n              label=\"Start Time\"\r\n              value={this.state.startTime}\r\n              onChange={this.handleStartTimeChange}\r\n              disablePast\r\n              format=\"yyyy-MM-dd  HH:mm\"\r\n            />\r\n          </MuiPickersUtilsProvider>\r\n          <TextField\r\n            label=\"Timespan per queue (minutes)\"\r\n            type=\"number\"\r\n            InputLabelProps={{\r\n              shrink: true,\r\n            }}\r\n            margin=\"normal\"\r\n            value={this.state.maxTimespan}\r\n            onChange={this.handleMaxTimespanChange}\r\n          />\r\n          <TextField\r\n            label=\"# of people in action\"\r\n            type=\"number\"\r\n            InputLabelProps={{\r\n              shrink: true,\r\n            }}\r\n            margin=\"normal\"\r\n            value={this.state.actionUserNumber}\r\n            onChange={this.handleActionUserNumberChange}\r\n          />\r\n          <Button variant=\"contained\" color=\"primary\" onClick={this.handleCreateQueue}>\r\n            Submit\r\n          </Button>\r\n        </FormControl>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default withRouter(CreateQueue);\r\n","import React, { Component } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nclass Home extends Component {\r\n  handleRedirectCreateQueue = () => {\r\n    this.props.history.push('/create');\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Queue me up</h1>\r\n        <Button variant=\"contained\" color=\"primary\" onClick={this.handleRedirectCreateQueue}>\r\n          Create Queue\r\n        </Button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default withRouter(Home);\r\n","import * as types from '../types/Queue';\r\nimport firebase from '../../util/firebase';\r\n\r\nconst getQueueDataLoading = (payload) => {\r\n  return {\r\n    type: types.QUEUE_DATA_LOADING,\r\n    payload\r\n  }\r\n};\r\n\r\nconst getQueueDataSuccess = (payload) => {\r\n  return {\r\n    type: types.QUEUE_DATA_SUCCESS,\r\n    payload\r\n  }\r\n};\r\n\r\nconst getQueueDataError = (payload) => {\r\n  return {\r\n    type: types.QUEUE_DATA_ERROR,\r\n    payload\r\n  }\r\n};\r\n\r\nconst joinQueueLoading = (payload) => {\r\n  return {\r\n    type: types.JOIN_QUEUE_LOADING,\r\n    payload\r\n  }\r\n};\r\n\r\nconst joinQueueSuccess = (payload) => {\r\n  return {\r\n    type: types.JOIN_QUEUE_SUCCESS,\r\n    payload\r\n  }\r\n};\r\n\r\nconst joinQueueError = (payload) => {\r\n  return {\r\n    type: types.JOIN_QUEUE_ERROR,\r\n    payload\r\n  }\r\n};\r\n\r\nconst leaveQueueLoading = (payload) => {\r\n  return {\r\n    type: types.LEAVE_QUEUE_LOADING,\r\n    payload\r\n  }\r\n};\r\n\r\nconst leaveQueueSuccess = (payload) => {\r\n  return {\r\n    type: types.LEAVE_QUEUE_SUCCESS,\r\n    payload\r\n  }\r\n};\r\n\r\nconst leaveQueueError = (payload) => {\r\n  return {\r\n    type: types.LEAVE_QUEUE_ERROR,\r\n    payload\r\n  }\r\n};\r\n\r\nconst getQueueData = (queueId) => (dispatch) => {\r\n  if (!queueId) return;\r\n\r\n  let isLoading = true;\r\n  dispatch(getQueueDataLoading(isLoading));\r\n  firebase.firestore().collection('queues').doc(queueId).onSnapshot((doc) => {\r\n    if (doc.exists) {\r\n      isLoading = false;\r\n      let queueIndex = 0;\r\n      dispatch(getQueueDataLoading(isLoading));\r\n      dispatch(getQueueDataSuccess(Object.assign(doc.data(),\r\n        {\r\n          startTime: new Date(doc.data().startTime.seconds * 1000),\r\n          users: doc.data().users.map(userName => {\r\n            return {\r\n              order: ++queueIndex,\r\n              name: userName,\r\n            };\r\n          }),\r\n        })\r\n      ));\r\n    }\r\n  }, error => {\r\n    isLoading = false;\r\n    dispatch(getQueueDataLoading(isLoading));\r\n    dispatch(getQueueDataError(error));\r\n  });\r\n};\r\n\r\nconst joinQueue = (queueId, userName) => (dispatch) => {\r\n  if (!userName) return;\r\n\r\n  let isLoading = true;\r\n  dispatch(joinQueueLoading(isLoading));\r\n  firebase.firestore().collection('queues').doc(queueId).update({\r\n    users: firebase.firestore.FieldValue.arrayUnion(userName),\r\n  }).then(response => {\r\n    isLoading = false;\r\n    dispatch(joinQueueLoading(isLoading));\r\n    if (!response) {\r\n      dispatch(joinQueueSuccess({ currentUser: userName }));\r\n    } else {\r\n      dispatch(joinQueueError('Something went wrong.'));\r\n    }\r\n  });\r\n};\r\n\r\nconst leaveQueue = (queueId, userName) => (dispatch) => {\r\n  if (!userName) return;\r\n\r\n  let isLoading = true;\r\n  dispatch(leaveQueueLoading(isLoading));\r\n  firebase.firestore().collection('queues').doc(queueId).update({\r\n    users: firebase.firestore.FieldValue.arrayRemove(userName),\r\n  }).then(response => {\r\n    isLoading = false;\r\n    dispatch(leaveQueueLoading(isLoading));\r\n    if (!response) {\r\n      dispatch(joinQueueSuccess({ currentUser: null }));\r\n      dispatch(leaveQueueSuccess({ message: 'Leaved successfully.'}));\r\n    } else {\r\n      dispatch(leaveQueueError('Something went wrong.'));\r\n    }\r\n  });\r\n};\r\n\r\nexport { getQueueData, joinQueue, leaveQueue };\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { FormControl, InputLabel, Input, Button } from '@material-ui/core';\r\nimport { getQueueData, joinQueue, leaveQueue } from '../../redux/actions/Queue';\r\nimport './Queue.scss';\r\n\r\nclass Queue extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      userName: '',\r\n    };\r\n\r\n    this.handleJoinQueue = this.handleJoinQueue.bind(this);\r\n    this.handleLeaveQueue = this.handleLeaveQueue.bind(this);\r\n    this.handleUsernameChange = this.handleUsernameChange.bind(this);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    if (this.props.joinQueueResponse.currentUser) {\r\n      this.props.onLeaveQueue(this.props.joinQueueResponse.currentUser);\r\n    }\r\n  }\r\n\r\n  handleJoinQueue() {\r\n    if (this.state.userName) {\r\n      this.props.onJoinQueue(this.state.userName);\r\n    }\r\n  }\r\n\r\n  handleLeaveQueue() {\r\n    this.setState({\r\n      userName: '',\r\n    });\r\n    if (this.props.joinQueueResponse.currentUser) {\r\n      this.props.onLeaveQueue(this.props.joinQueueResponse.currentUser);\r\n    }\r\n  }\r\n\r\n  handleUsernameChange(e) {\r\n    if (e && e.target) {\r\n      this.setState({\r\n        userName: e.target.value,\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { queueData, isLoading, queueDataError, joinQueueResponse, isJoinQueueLoading,\r\n      joinQueueError, isLeaveQueueLoading, leaveQueueError } = this.props;\r\n    const timeNow = new Date();\r\n    if (isLoading) {\r\n      return <span>Loading...</span>;\r\n    } else if (queueDataError) {\r\n      return <span>{queueDataError}</span>;\r\n    }\r\n\r\n    let usersInAction = [];\r\n    let usersInQueue = [];\r\n    if (queueData.users && queueData.users.length > 0) {\r\n      usersInAction = usersInAction.concat(queueData.users);\r\n      usersInQueue = usersInAction.splice(queueData.actionUserNumber);\r\n    }\r\n\r\n    let subTitle = null;\r\n    let mainContent = null;\r\n    if (queueData.startTime && new Date(queueData.startTime) > timeNow) {\r\n      subTitle = (\r\n        <span className=\"queue-subtitle queue-subtitle--not-live\">\r\n          You cannot joing this queue yet because it has not been started,\r\n          please come back after <strong>{queueData.startTime.toString()}</strong>.\r\n        </span>\r\n      );\r\n    } else if (queueData.startTime) {\r\n      subTitle = (\r\n        <span className=\"queue-subtitle\">\r\n          This queue is now live, enter your name below and join the queue before others!\r\n        </span>\r\n      );\r\n      mainContent = (\r\n        <div className=\"queue-main-content\">\r\n          <div className=\"action-list-users\">\r\n            <div className=\"action-list-users__title\">Users in action (limit {queueData.actionUserNumber})</div>\r\n            {usersInAction.length > 0 ? usersInAction.map(user => {\r\n              return (\r\n                <div className=\"action-list-user\" key={user.name}>\r\n                  <div className=\"action-list-user__name\">{user.name}</div>\r\n                </div>\r\n              );\r\n            }) : <span className=\"action-list-users-placeholder\">Nobody is in queue. Join now to be the first!</span>}\r\n          </div>\r\n          {usersInQueue.length > 0 &&\r\n            <div className=\"queue-list-users\">\r\n            <div className=\"queue-list-users__title\">Up next</div>\r\n              {usersInQueue.map(user => {\r\n                return (\r\n                  <div className=\"queue-list-user\" key={user.name}>\r\n                    <div className=\"queue-list-user__order\">{user.order}</div>\r\n                    <div className=\"queue-list-user__name\">{user.name}</div>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          }\r\n          {joinQueueResponse.currentUser &&\r\n            <div className=\"queue-joined-as\">\r\n              You are in queue as:\r\n              <span className=\"queue-joined-as__name\"> {joinQueueResponse.currentUser}</span>\r\n            </div>\r\n          }\r\n          <div className=\"queue-action-form\">\r\n            {joinQueueResponse.currentUser ? (\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                className=\"queue-action-form__button\"\r\n                onClick={this.handleLeaveQueue}\r\n                disabled={isLeaveQueueLoading}\r\n              >\r\n                Leave Queue\r\n              </Button>\r\n            ) : (\r\n              <FormControl>\r\n                <InputLabel htmlFor=\"input-name\">Enter name</InputLabel>\r\n                <Input\r\n                  id=\"input-name\"\r\n                  className=\"queue-action__username-input\"\r\n                  value={this.state.userName}\r\n                  onChange={this.handleUsernameChange}\r\n                />\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  className=\"queue-action-form__button\"\r\n                  onClick={this.handleJoinQueue}\r\n                  disabled={queueData.startTime && new Date(queueData.startTime) > timeNow || isJoinQueueLoading}\r\n                >\r\n                  Join Queue\r\n                </Button>\r\n              </FormControl>\r\n            )}\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div className=\"queue-container\">\r\n        <div className=\"queue-name\">{queueData.name}</div>\r\n        {subTitle}\r\n        {mainContent}\r\n      </div>\r\n    )\r\n  }\r\n};\r\n\r\nQueue.propTypes = {\r\n  match: PropTypes.shape({\r\n    params: PropTypes.shape({\r\n      queueId: PropTypes.string,\r\n    }),\r\n  }).isRequired,\r\n  // from mapStateToProps\r\n  queueData: PropTypes.object.isRequired,\r\n  isLoading: PropTypes.bool.isRequired,\r\n  queueDataError: PropTypes.string,\r\n  joinQueueResponse: PropTypes.object.isRequired,\r\n  isJoinQueueLoading: PropTypes.bool.isRequired,\r\n  joinQueueError: PropTypes.string,\r\n  leaveQueueResponse: PropTypes.object.isRequired,\r\n  isLeaveQueueLoading: PropTypes.bool.isRequired,\r\n  leaveQueueError: PropTypes.string,\r\n};\r\n\r\nQueue.defaultProps = {\r\n  queueDataError: '',\r\n  joinQueueError: '',\r\n  leaveQueueError: '',\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    queueData: state.getQueueReducer.queueData,\r\n    isLoading: state.getQueueReducer.isQueueDataLoading,\r\n    queueDataError: state.getQueueReducer.queueDataError,\r\n    joinQueueResponse: state.joinQueueReducer.joinQueueResponse,\r\n    isJoinQueueLoading: state.joinQueueReducer.isJoinQueueLoading,\r\n    joinQueueError: state.joinQueueReducer.joinQueueError,\r\n    leaveQueueResponse: state.leaveQueueReducer.leaveQueueResponse,\r\n    isLeaveQueueLoading: state.leaveQueueReducer.isLeaveQueueLoading,\r\n    leaveQueueError: state.leaveQueueReducer.leaveQueueError,\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n  return {\r\n    getQueueData: dispatch(getQueueData(ownProps.match.params.queueId)),\r\n    onJoinQueue: (name => {\r\n      dispatch(joinQueue(ownProps.match.params.queueId, name));\r\n    }),\r\n    onLeaveQueue: (name => {\r\n      dispatch(leaveQueue(ownProps.match.params.queueId, name));\r\n    }),\r\n  }\r\n};\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Queue));\r\n","import React from 'react';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport './App.css';\nimport CreateQueue from \"./pages/create-queue/CreateQueue\";\nimport Home from \"./pages/home/Home\";\nimport Queue from \"./pages/queue/Queue\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route path=\"/create\">\n            <CreateQueue />\n          </Route>\n          <Route path=\"/queue/:queueId\">\n            <Queue />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport configureStore from './redux/configureStore';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = configureStore();\n\nReactDOM.render((\n  <Provider store={store}>\n    <App />\n  </Provider>\n), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { applyMiddleware, compose, createStore } from 'redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\n\r\nimport monitorReducersEnhancer from './enhancers/monitorReducer';\r\nimport loggerMiddleware from './middleware/logger';\r\nimport rootReducer from './reducers';\r\n\r\nexport default function configureStore(preloadedState) {\r\n  const middlewares = [loggerMiddleware, thunkMiddleware];\r\n  const middlewareEnhancer = applyMiddleware(...middlewares);\r\n\r\n  const enhancers = [middlewareEnhancer, monitorReducersEnhancer];\r\n  const composedEnhancers = compose(...enhancers);\r\n\r\n  const store = createStore(rootReducer, preloadedState, composedEnhancers);\r\n\r\n  return store;\r\n}\r\n"],"sourceRoot":""}